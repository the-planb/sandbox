imports:
  - { resource: 'security/' }


security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    auth_provider:
      entity:
        class: App\Auth\Domain\Model\User
      
#  role_hierarchy:
#    ROLE_MEDIA_GENRES: [ ROLE_MEDIA_GENRES_CREATE, ROLE_MEDIA_GENRES_LIST, ROLE_MEDIA_GENRES_EDIT, ROLE_MEDIA_GENRES_DELETE, ROLE_MEDIA_GENRES_SHOW ]
#    ROLE_EDITOR: [ ROLE_MEDIA_GENRES, ROLE_DASHBOARD_LIST ]
#    ROLE_ADMIN: [ ROLE_EDITOR ]
  
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      stateless: true
      entry_point: jwt
      provider: auth_provider
      json_login:
        check_path: /api/token/auth
        username_path: username
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      
      logout:
        path: token_logout
      
      jwt: ~
      refresh_jwt:
        check_path: /api/token/refresh
      
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall
      
      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true
  
  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/docs, roles: PUBLIC_ACCESS }
    #        - { path: ^/api/_fos_user_context_hash, roles: PUBLIC_ACCESS }
    - { path: ^/api/token/auth, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: ROLE_EDITOR }
    #- { path: ^/api, roles: PUBLIC_ACCESS }


when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
